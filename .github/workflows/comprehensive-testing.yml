name: Comprehensive Testing Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.packages.outputs.packages }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed packages
        id: packages
        run: |
          PACKAGES=$(find src -name "package.json" -not -path "*/node_modules/*" | jq -R -s -c 'split("\n")[:-1] | map(sub("/package.json"; ""))')
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT

  quality-gates:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.2.0"

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run linting
        run: bun run lint

      - name: Check formatting
        run: bun run prettier

      - name: Type checking
        run: bun run check

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.2.0"

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Security audit
        run: bun audit --audit-level moderate

      - name: License check
        run: bun run license-check

      - name: Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

  unit-tests:
    runs-on: ubuntu-latest
    needs: [quality-gates]
    strategy:
      matrix:
        shard: [1, 2, 3, 4]
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.2.0"

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run unit tests (shard ${{ matrix.shard }}/4)
        run: bun test --shard ${{ matrix.shard }}/4 --name-pattern="*.unit.*"

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  integration-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5


    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.2.0"

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run integration tests
        run: bun test --name-pattern="*.integration.*"
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/test

  performance-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.2.0"

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run performance benchmarks
        run: bun run test:performance

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-report.json

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.2.0"

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run E2E tests
        run: bun test --name-pattern="*.e2e.*"

  self-healing:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, e2e-tests]
    if: failure()
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.2.0"

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run self-healing
        run: bun run test:self-heal

      - name: Create issue for persistent failures
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔧 Self-healing failed - Manual intervention required',
              body: `## Failed Tests Summary
              
              The self-healing system couldn't automatically fix the following issues:
              
              - **Workflow**: ${{ github.workflow }}
              - **Run ID**: ${{ github.run_id }}
              - **Commit**: ${{ github.sha }}
              
              Please investigate and resolve manually.`,
              labels: ['bug', 'self-healing', 'high-priority']
            });

  coverage-report:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.2.0"

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate coverage report
        run: bun run test:coverage

      - name: Coverage threshold check
        run: |
          COVERAGE=$(bun test --coverage --reporter=json | jq '.coverageMap.total.statements.pct')
          if (( $(echo "$COVERAGE < 90" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below 90% threshold"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets 90% threshold"
          fi
