# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json

language: en-US
tone_instructions:
  "AI-first enterprise development: Bun TypeScript, MCP excellence, GDPR compliance, 90%+ Bun test coverage,
  zero-downtime CF Workers deployment, autonomous code quality."
early_access: true
enable_free_tier: false
reviews:
  profile: assertive
  request_changes_workflow: true
  high_level_summary: true
  high_level_summary_placeholder: "@coderabbitai enterprise-summary"
  high_level_summary_in_walkthrough: true
  auto_title_placeholder: "@coderabbitai ai-title"
  auto_title_instructions:
    "Generate enterprise-grade titles emphasizing code understanding: [TYPE] Brief impact description (affects:
    component/system). Highlight review complexity, knowledge transfer requirements, and maintainability implications."
  review_status: true
  commit_status: true
  fail_commit_status: true
  collapse_walkthrough: false
  changed_files_summary: true
  sequence_diagrams: true
  estimate_code_review_effort: true
  assess_linked_issues: true
  related_issues: true
  related_prs: true
  suggested_labels: true
  auto_apply_labels: true
  suggested_reviewers: true
  auto_assign_reviewers: true
  poem: false
  labeling_instructions:
    - label: "🐛 Bug Fix"
      instructions: Corrects errors, bugs, or unintended behavior affecting system reliability.
    - label: "🔧 Chore"
      instructions: Maintenance tasks, build updates, dependency management, configuration changes.
    - label: "📦 Dependencies"
      instructions: Updates to Bun, npm packages, or runtime dependencies with security/performance impact.
    - label: "📚 Documentation"
      instructions: Documentation updates, API guides, architectural decisions, or code comments.
    - label: "✨ Feature"
      instructions: New enterprise functionality, user capabilities, or business value additions.
    - label: "🚨 Hotfix"
      instructions: Critical production fixes requiring immediate deployment (zero-downtime priority).
    - label: "⚡ Performance"
      instructions: Optimizations for speed, memory, or resource efficiency in enterprise environments.
    - label: "♻️ Refactor"
      instructions: Code structure improvements maintaining behavior while enhancing maintainability.
    - label: "🔒 Security"
      instructions: Security vulnerabilities, GDPR compliance, or enterprise security posture improvements.
    - label: "🧪 Testing"
      instructions: Test coverage improvements, Bun test runner enhancements, or quality assurance updates.
    - label: "🤖 MCP Server"
      instructions: Model Context Protocol server development, tool implementations, or schema updates.
    - label: "🛡️ GDPR Compliance"
      instructions: Data protection, privacy controls, or German/EU regulatory compliance features.
    - label: "🐰 Bun Runtime"
      instructions: Bun-specific optimizations, built-in API usage, or runtime feature implementations.
    - label: "🌌 AI Agent"
      instructions: Autonomous systems, self-healing capabilities, or AI-driven automation features.
    - label: "☁️ Cloudflare Workers"
      instructions: Edge computing, serverless deployment, or Cloudflare-specific optimizations.
    - label: "🏢 Enterprise"
      instructions: Enterprise-grade scalability, compliance, monitoring, or business-critical features.
    - label: "🔄 CI/CD"
      instructions: Build automation, deployment pipelines, or development workflow improvements.
    - label: "📊 Monitoring"
      instructions: Observability, logging, metrics, or enterprise monitoring capabilities.
  path_filters:
    - "!**/node_modules/**"
    - "!**/dist/**"
    - "!**/.nx/cache/**"
    - "!**/coverage/**"
    - "!**/bun.lock"
  path_instructions:
    - path: "*"
      instructions: >
        CRITICAL INSIGHT: Code understanding is the primary bottleneck, not code generation. Focus reviews on: 1. Code
        Comprehension: Ensure AI-generated code is easily understood by human reviewers 2. Knowledge Transfer:
        Prioritize clear documentation and decision rationale over speed 3. Review Quality: The real bottlenecks are
        code reviews, testing, and coordination - not writing code 4. Maintainability: Code must be self-documenting
        with comprehensive business context 5. Team Collaboration: Facilitate effective knowledge sharing through clear,
        well-documented code 6. AI-First Development: Generate code optimized for human understanding and review
        efficiency Remember: Writing code was never the bottleneck - understanding and maintaining it is.
    - path: "src/**/tests/**"
      instructions: >
        Enforce 90%+ coverage with Bun's native test runner. Validate enterprise test patterns: unit/integration/e2e
        separation, performance benchmarks, security test cases, and GDPR compliance validation. Use descriptive test
        naming.
    - path: "src/**/mcp/**"
      instructions: >
        MCP protocol excellence: schema validation, security boundaries, tool discovery optimization, error handling
        with graceful degradation. Ensure enterprise-grade logging and monitoring integration.
    - path: "**/*.config.*"
      instructions: >
        Bun-first configuration validation: monorepo compatibility, enterprise deployment readiness, security hardening,
        and zero-downtime deployment support. Validate against project_rules.md standards.
    - path: "src/**/*.ts"
      instructions: >
        Enterprise TypeScript standards prioritizing code understanding: strict typing, comprehensive JSDoc explaining
        business context and decision rationale, Bun built-in API preference, GDPR compliance patterns. Focus on review
        quality over generation speed - code understanding is the bottleneck, not writing code. Ensure maintainability
        and knowledge transfer through clear, self-documenting code.
    - path: ".github/workflows/**"
      instructions: >
        AI-driven CI/CD: Bun-optimized pipelines, automated quality gates, security scanning, enterprise deployment to
        Cloudflare Workers, and autonomous monitoring integration.
    - path: "docs/**"
      instructions: >
        Enterprise documentation standards: architectural decisions, API specifications, security guidelines, GDPR
        compliance procedures, and AI agent integration patterns.
    - path: "src/**/ai/**"
      instructions: >
        AI agent development: autonomous systems design, self-healing capabilities, enterprise AI safety, monitoring
        integration, and human-in-the-loop patterns for critical operations.
  abort_on_close: true
  disable_cache: false
  auto_review:
    enabled: true
    auto_incremental_review: true
    ignore_title_keywords: []
    labels: []
    drafts: false
    base_branches:
      - main
      - develop
      - feature/*
      - hotfix/*
      - release/*
  finishing_touches:
    docstrings:
      enabled: true
    unit_tests:
      enabled: true
  pre_merge_checks:
    docstrings:
      mode: error
      threshold: 80
    title:
      mode: error
    description:
      mode: warning
    issue_assessment:
      mode: warning
  tools:
    ast-grep:
      rule_dirs: [".trae/rules"]
      util_dirs: []
      essential_rules: true
      packages: []
    shellcheck:
      enabled: true
    markdownlint:
      enabled: true
    github-checks:
      enabled: true
      timeout_ms: 120000
    languagetool:
      enabled: true
      enabled_rules: []
      disabled_rules: []
      enabled_categories: []
      disabled_categories: []
      enabled_only: false
      level: default
    biome:
      enabled: false # Using ESLint + Prettier for consistency
    yamllint:
      enabled: true
    gitleaks:
      enabled: true
    checkov:
      enabled: true
    eslint:
      enabled: true
    actionlint:
      enabled: true
    semgrep:
      enabled: true
    osvScanner:
      enabled: true
    # Disabled tools not relevant to Bun/TypeScript/MCP stack
    ruff:
      enabled: false
    hadolint:
      enabled: false
    swiftlint:
      enabled: false
    phpstan:
      enabled: false
    phpmd:
      enabled: false
    phpcs:
      enabled: false
    golangci-lint:
      enabled: false
    detekt:
      enabled: false
    flake8:
      enabled: false
    rubocop:
      enabled: false
    buf:
      enabled: false
    regal:
      enabled: false
    pmd:
      enabled: false
    cppcheck:
      enabled: false
    circleci:
      enabled: false
    clippy:
      enabled: false
    sqlfluff:
      enabled: false
    prismaLint:
      enabled: false
    pylint:
      enabled: false
    oxc:
      enabled: false
    shopifyThemeCheck:
      enabled: false
    luacheck:
      enabled: false
    brakeman:
      enabled: false
    dotenvLint:
      enabled: false
    htmlhint:
      enabled: false
    checkmake:
      enabled: false
chat:
  art: true
  auto_reply: true
  integrations:
    jira:
      usage: disabled
    linear:
      usage: enabled
knowledge_base:
  opt_out: false
  web_search:
    enabled: true
  code_guidelines:
    enabled: true
    filePatterns:
      - "**/.trae/rules/project_rules.md"
      - "**/README.md"
      - "**/docs/**"
      - "**/CONTRIBUTING.md"
      - "**/SECURITY.md"
      - "**/CODE_OF_CONDUCT.md"
      - "**/tsconfig.json"
      - "**/bunfig.toml"
  learnings:
    scope: global
  issues:
    scope: global
  jira:
    usage: disabled
    project_keys: []
  linear:
    usage: enabled
    team_keys:
      - CX
  pull_requests:
    scope: local
  mcp:
    usage: auto
    disabled_servers: []
code_generation:
  docstrings:
    language: en-US
    path_instructions:
      - path: "src/**/*.ts"
        instructions: >
          Generate enterprise-grade JSDoc: @param, @returns, @throws, @example, @since, @deprecated. Include business
          context, GDPR compliance notes, performance implications, and AI agent integration patterns.
      - path: "src/**/mcp/**"
        instructions: >
          MCP-specific documentation: protocol compliance, security boundaries, tool discovery patterns, error handling
          strategies, and enterprise integration guidelines.
      - path: "src/**/ai/**"
        instructions: >
          AI agent documentation: autonomous behavior patterns, self-healing mechanisms, monitoring integration,
          human-in-the-loop triggers, and enterprise safety considerations.
  unit_tests:
    path_instructions:
      - path: "src/**/*.ts"
        instructions: >
          Generate comprehensive Bun native tests with 90%+ coverage. Use enterprise test patterns: 'Given-When-Then'
          structure, performance benchmarks, security validation, and GDPR compliance checks.
      - path: "src/**/mcp/**"
        instructions: >
          MCP protocol testing: schema validation, security boundaries, error handling, tool discovery flows, enterprise
          integration scenarios, and performance under load.
      - path: "src/**/ai/**"
        instructions: >
          AI agent testing: autonomous behavior validation, self-healing scenarios, monitoring integration, enterprise
          safety checks, and human-in-the-loop trigger conditions.
