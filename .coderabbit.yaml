# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json

language: de-DE
tone_instructions:
  "Focus on Bun-first TypeScript development, GDPR compliance, MCP optimization, 80%+ test coverage via Vitest, AI agent
  automation, and Cloudflare Workers deployment. Prioritize velocity and minimal human intervention."
early_access: true
enable_free_tier: false
reviews:
  profile: assertive
  request_changes_workflow: true
  high_level_summary: true
  high_level_summary_placeholder: "@coderabbitai summary"
  high_level_summary_in_walkthrough: true
  auto_title_placeholder: "@coderabbitai"
  auto_title_instructions:
    "Generate concise, action-oriented titles focusing on business impact and technical improvements"
  review_status: true
  commit_status: true
  fail_commit_status: true
  collapse_walkthrough: false
  changed_files_summary: true
  sequence_diagrams: true
  estimate_code_review_effort: true
  assess_linked_issues: true
  related_issues: true
  related_prs: true
  suggested_labels: true
  auto_apply_labels: true
  suggested_reviewers: false
  auto_assign_reviewers: false
  poem: false
  labeling_instructions:
    - label: Bug Fix
      instructions: Corrects an error, bug, or unintended behavior in existing code.
    - label: Chore
      instructions: >
        Maintenance tasks, build process updates, dependency bumps, config changes.
    - label: Dependencies
      instructions: >
        Updates to project dependencies, libraries, frameworks, or runtime versions.
    - label: Documentation
      instructions: >
        Changes solely related to documentation (READMEs, guides, code comments).
    - label: Feature
      instructions: Adds new user-facing functionality or capabilities.
    - label: Hotfix
      instructions: Urgent fix for a critical production issue (often cherry-picked).
    - label: Improvement
      instructions: >
        Enhances existing code, performance, reliability, or developer experience (non-functional).
    - label: Performance
      instructions: Optimizes performance or reduces resource usage.
    - label: Refactor
      instructions: Improves code structure or readability without changing behavior.
    - label: Security
      instructions: Addresses a security vulnerability or improves security posture.
    - label: Testing
      instructions: Adds or significantly updates tests (unit, integration, e2e).
    - label: MCP
      instructions: Changes related to Model Context Protocol server development or configuration.
    - label: GDPR
      instructions: Changes ensuring GDPR compliance for German enterprise/healthcare markets.
    - label: Bun
      instructions: Changes leveraging Bun runtime, tooling, or built-in APIs.
    - label: AI Agent
      instructions: Changes supporting AI agent automation, self-healing, or iterative improvements.
    - label: Cloudflare
      instructions: Changes related to Cloudflare Workers deployment or edge computing.
    - label: Enterprise
      instructions: Changes supporting enterprise-grade features, scalability, or compliance.
  path_filters:
    - "!**/node_modules/**"
    - "!**/dist/**"
    - "!**/.nx/cache/**"
    - "!**/coverage/**"
    - "!**/bun.lock"
  path_instructions:
    - path: "src/**/tests/**"
      instructions: >
        Focus on test coverage, edge cases, and Vitest best practices. Ensure 80%+ coverage thresholds. Validate test
        naming conventions (functionName.test.ts) and proper TypeScript typing.
    - path: "src/**/mcp/**"
      instructions: >
        Emphasize MCP protocol compliance, schema validation, security patterns, and tool discovery. Ensure proper error
        handling and HITL (Human-in-the-Loop) for sensitive operations.
    - path: "**/*.config.*"
      instructions: >
        Validate configuration against Bun-first principles. Ensure compatibility with monorepo structure and enterprise
        deployment requirements.
    - path: "src/**/*.ts"
      instructions: >
        Enforce strict TypeScript, function-level comments, and Bun built-in API usage. Validate GDPR compliance
        patterns and enterprise security practices.
    - path: ".github/workflows/**"
      instructions: >
        Optimize for Bun-based CI/CD, automated testing, and @wemake-ai scope publishing. Ensure Cloudflare Workers
        deployment compatibility.
  abort_on_close: true
  disable_cache: false
  auto_review:
    enabled: true
    auto_incremental_review: true
    ignore_title_keywords: []
    labels: []
    drafts: false
    base_branches:
      - main
      - develop
      - feature/*
      - hotfix/*
      - release/*
  finishing_touches:
    docstrings:
      enabled: true
    unit_tests:
      enabled: true
  pre_merge_checks:
    docstrings:
      mode: error
      threshold: 90
    title:
      mode: error
      requirements: "Must be descriptive, action-oriented, and indicate business/technical impact"
    description:
      mode: error
    issue_assessment:
      mode: error
  tools:
    ast-grep:
      rule_dirs: [".trae/rules"]
      util_dirs: []
      essential_rules: true
      packages: []
    shellcheck:
      enabled: true
    markdownlint:
      enabled: true
    github-checks:
      enabled: true
      timeout_ms: 120000
    languagetool:
      enabled: true
      enabled_rules: []
      disabled_rules: []
      enabled_categories: []
      disabled_categories: []
      enabled_only: false
      level: default
    biome:
      enabled: false # Using ESLint + Prettier for consistency
    yamllint:
      enabled: true
    gitleaks:
      enabled: true
    checkov:
      enabled: true
    eslint:
      enabled: true
    actionlint:
      enabled: true
    semgrep:
      enabled: true
    osvScanner:
      enabled: true
    # Disabled tools not relevant to Bun/TypeScript/MCP stack
    ruff:
      enabled: false
    hadolint:
      enabled: false
    swiftlint:
      enabled: false
    phpstan:
      enabled: false
    phpmd:
      enabled: false
    phpcs:
      enabled: false
    golangci-lint:
      enabled: false
    detekt:
      enabled: false
    flake8:
      enabled: false
    rubocop:
      enabled: false
    buf:
      enabled: false
    regal:
      enabled: false
    pmd:
      enabled: false
    cppcheck:
      enabled: false
    circleci:
      enabled: false
    clippy:
      enabled: false
    sqlfluff:
      enabled: false
    prismaLint:
      enabled: false
    pylint:
      enabled: false
    oxc:
      enabled: false
    shopifyThemeCheck:
      enabled: false
    luacheck:
      enabled: false
    brakeman:
      enabled: false
    dotenvLint:
      enabled: false
    htmlhint:
      enabled: false
    checkmake:
      enabled: false
chat:
  art: true
  auto_reply: true
  integrations:
    jira:
      usage: disabled
    linear:
      usage: enabled
knowledge_base:
  opt_out: false
  web_search:
    enabled: true
  code_guidelines:
    enabled: true
    filePatterns:
      - "**/.trae/rules/project_rules.md"
      - "**/README.md"
      - "**/docs/**"
      - "**/CONTRIBUTING.md"
      - "**/SECURITY.md"
  learnings:
    scope: global
  issues:
    scope: global
  jira:
    usage: disabled
    project_keys: []
  linear:
    usage: enabled
    team_keys:
      - DEVX
      - MCP
      - AI
  pull_requests:
    scope: local
  mcp:
    usage: auto
    disabled_servers: []
  enterprise:
    gdpr_compliance: true
    healthcare_compliance: true
    german_market_focus: true
  ai_agent:
    self_healing: true
    iterative_improvements: true
    minimal_human_intervention: true
code_generation:
  docstrings:
    language: en-US
    path_instructions:
      - path: "src/**/*.ts"
        instructions: >
          Generate comprehensive JSDoc comments with @param, @returns, @throws, and @example. Include business context
          and GDPR compliance notes where applicable.
      - path: "src/**/mcp/**"
        instructions: >
          Focus on MCP protocol compliance, security considerations, and tool discovery patterns.
  unit_tests:
    path_instructions:
      - path: "src/**/*.ts"
        instructions: >
          Generate Vitest tests with 80%+ coverage. Use descriptive test names following 'should [expected behavior]
          when [condition]' pattern. Include edge cases and error scenarios.
      - path: "src/**/mcp/**"
        instructions: >
          Test MCP protocol compliance, schema validation, error handling, and security boundaries. Include integration
          tests for tool discovery and execution flows.
